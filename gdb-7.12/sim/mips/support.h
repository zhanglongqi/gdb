/* This file is part of GDB.

   Copyright 2002, 2007 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.

   --

   This file was generated by the program igen */

#ifndef SUPPORT_H
#define SUPPORT_H

#define SD sd
#define CPU (STATE_CPU (sd, 0))
#define CPU_ sd
#define CIA_ cia
#define CIA cia
#define NIA nia

#define SD_ CPU_, CIA_, MY_INDEX
#define _SD SD_ /* deprecated */

INLINE_SUPPORT\
(instruction_address) semantic_illegal
(SIM_DESC sd,
 instruction_address cia);

INLINE_SUPPORT\
(address_word) delayslot32
(SIM_DESC sd, instruction_address cia, int MY_INDEX, address_word target);

INLINE_SUPPORT\
(address_word) nullify_next_insn32
(SIM_DESC sd, instruction_address cia, int MY_INDEX);

INLINE_SUPPORT\
(address_word) loadstore_ea
(SIM_DESC sd, instruction_address cia, int MY_INDEX, address_word base, address_word offset);

INLINE_SUPPORT\
(int) not_word_value
(SIM_DESC sd, instruction_address cia, int MY_INDEX, unsigned_word value);

INLINE_SUPPORT\
(void) unpredictable
(SIM_DESC sd, instruction_address cia, int MY_INDEX);

INLINE_SUPPORT\
(int) check_mf_cycles
(SIM_DESC sd, instruction_address cia, int MY_INDEX, hilo_history *history, signed64 time, const char *new);

INLINE_SUPPORT\
(int) check_mt_hilo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, hilo_history *history);

INLINE_SUPPORT\
(int) check_mf_hilo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, hilo_history *history, hilo_history *peer);

INLINE_SUPPORT\
(int) check_mult_hilo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, hilo_history *hi, hilo_history *lo);

INLINE_SUPPORT\
(int) check_div_hilo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, hilo_history *hi, hilo_history *lo);

INLINE_SUPPORT\
(void) check_u64
(SIM_DESC sd, instruction_address cia, int MY_INDEX, instruction_word insn);

INLINE_SUPPORT\
(void) do_add
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_addi
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, unsigned16 immediate);

INLINE_SUPPORT\
(void) do_andi
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, unsigned int immediate);

INLINE_SUPPORT\
(void) do_dadd
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_daddi
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int immediate);

INLINE_SUPPORT\
(void) do_dsll32
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int shift);

INLINE_SUPPORT\
(void) do_dsra32
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int shift);

INLINE_SUPPORT\
(void) do_dsrl32
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int shift);

INLINE_SUPPORT\
(void) do_dsub
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_break
(SIM_DESC sd, instruction_address cia, int MY_INDEX, address_word instruction_0);

INLINE_SUPPORT\
(void) do_break16
(SIM_DESC sd, instruction_address cia, int MY_INDEX, address_word instruction_0);

INLINE_SUPPORT\
(void) do_clo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs);

INLINE_SUPPORT\
(void) do_clz
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs);

INLINE_SUPPORT\
(void) do_dclo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs);

INLINE_SUPPORT\
(void) do_dclz
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs);

INLINE_SUPPORT\
(void) do_lb
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int offset, int base);

INLINE_SUPPORT\
(void) do_lh
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int offset, int base);

INLINE_SUPPORT\
(void) do_lwr
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int offset, int base);

INLINE_SUPPORT\
(void) do_lwl
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int offset, int base);

INLINE_SUPPORT\
(void) do_lwc
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int num, int rt, int offset, int base);

INLINE_SUPPORT\
(void) do_lw
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int offset, int base);

INLINE_SUPPORT\
(void) do_lwu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int offset, int base, address_word instruction_0);

INLINE_SUPPORT\
(void) do_lhu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int offset, int base);

INLINE_SUPPORT\
(void) do_ldc
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int num, int rt, int offset, int base);

INLINE_SUPPORT\
(void) do_lbu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int offset, int base);

INLINE_SUPPORT\
(void) do_ll
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int insn_offset, int basereg);

INLINE_SUPPORT\
(void) do_lld
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int roffset, int rbase);

INLINE_SUPPORT\
(void) do_lui
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int immediate);

INLINE_SUPPORT\
(void) do_madd
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt);

INLINE_SUPPORT\
(void) do_dsp_madd
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt);

INLINE_SUPPORT\
(void) do_maddu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt);

INLINE_SUPPORT\
(void) do_dsp_maddu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt);

INLINE_SUPPORT\
(void) do_dsp_mfhi
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rd);

INLINE_SUPPORT\
(void) do_dsp_mflo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rd);

INLINE_SUPPORT\
(void) do_movn
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_movz
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_msub
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt);

INLINE_SUPPORT\
(void) do_dsp_msub
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt);

INLINE_SUPPORT\
(void) do_msubu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt);

INLINE_SUPPORT\
(void) do_dsp_msubu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt);

INLINE_SUPPORT\
(void) do_mthi
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs);

INLINE_SUPPORT\
(void) do_dsp_mthi
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs);

INLINE_SUPPORT\
(void) do_mtlo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs);

INLINE_SUPPORT\
(void) do_dsp_mtlo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs);

INLINE_SUPPORT\
(void) do_mul
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_dsp_mult
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt);

INLINE_SUPPORT\
(void) do_dsp_multu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt);

INLINE_SUPPORT\
(void) do_pref
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int hint, int insn_offset, int insn_base);

INLINE_SUPPORT\
(void) do_sc
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int offsetarg, int basereg, address_word instruction_0);

INLINE_SUPPORT\
(void) do_scd
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int roffset, int rbase);

INLINE_SUPPORT\
(void) do_sub
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_sw
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int offset, int base);

INLINE_SUPPORT\
(void) do_teq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, address_word instruction_0);

INLINE_SUPPORT\
(void) do_teqi
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int immediate, address_word instruction_0);

INLINE_SUPPORT\
(void) do_tge
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, address_word instruction_0);

INLINE_SUPPORT\
(void) do_tgei
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int immediate, address_word instruction_0);

INLINE_SUPPORT\
(void) do_tgeiu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int immediate, address_word instruction_0);

INLINE_SUPPORT\
(void) do_tgeu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs ,int rt, address_word instruction_0);

INLINE_SUPPORT\
(void) do_tlt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, address_word instruction_0);

INLINE_SUPPORT\
(void) do_tlti
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int immediate, address_word instruction_0);

INLINE_SUPPORT\
(void) do_tltiu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int immediate, address_word instruction_0);

INLINE_SUPPORT\
(void) do_tltu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, address_word instruction_0);

INLINE_SUPPORT\
(void) do_tne
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, address_word instruction_0);

INLINE_SUPPORT\
(void) do_tnei
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int immediate, address_word instruction_0);

INLINE_SUPPORT\
(void) do_abs_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_add_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_alnv_ps
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fd, int fs, int ft, int rs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_c_cond_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int cond, int fmt, int cc, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_ceil_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int type, int fmt, int fd, int fs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_cfc1
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int fs);

INLINE_SUPPORT\
(void) do_ctc1
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int fs);

INLINE_SUPPORT\
(void) do_cvt_d_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_cvt_l_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_cvt_ps_s
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fd, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_cvt_s_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_cvt_s_pl
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fd, int fs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_cvt_s_pu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fd, int fs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_cvt_w_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_div_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_dmfc1b
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int fs);

INLINE_SUPPORT\
(void) do_dmtc1b
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int fs);

INLINE_SUPPORT\
(void) do_floor_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int type, int fmt, int fd, int fs);

INLINE_SUPPORT\
(void) do_luxc1_64
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fd, int rindex, int rbase);

INLINE_SUPPORT\
(void) do_lwc1
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ft, int offset, int base);

INLINE_SUPPORT\
(void) do_lwxc1
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fd, int index, int base, address_word instruction_0);

INLINE_SUPPORT\
(void) do_madd_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fr, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_mfc1b
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int fs);

INLINE_SUPPORT\
(void) do_mov_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_movtf
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int tf, int rd, int rs, int cc);

INLINE_SUPPORT\
(void) do_movtf_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int tf, int fmt, int fd, int fs, int cc);

INLINE_SUPPORT\
(void) do_movn_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, int rt);

INLINE_SUPPORT\
(void) do_movz_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, int rt);

INLINE_SUPPORT\
(void) do_msub_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fr, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_mtc1b
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int fs);

INLINE_SUPPORT\
(void) do_mul_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_neg_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, address_word instruction_0);

INLINE_SUPPORT\
(void) do_nmadd_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fr, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_nmsub_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fr, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_pll_ps
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fd, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_plu_ps
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fd, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_pul_ps
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fd, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_puu_ps
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fd, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_recip_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs);

INLINE_SUPPORT\
(void) do_round_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int type, int fmt, int fd, int fs);

INLINE_SUPPORT\
(void) do_rsqrt_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs);

INLINE_SUPPORT\
(void) do_prefx
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int hint, int rindex, int rbase);

INLINE_SUPPORT\
(void) do_suxc1_64
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fs, int rindex, int rbase);

INLINE_SUPPORT\
(void) do_sqrt_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs);

INLINE_SUPPORT\
(void) do_sub_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, int fd, int fs, int ft, address_word instruction_0);

INLINE_SUPPORT\
(void) do_swc1
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ft, int roffset, int rbase, address_word instruction_0);

INLINE_SUPPORT\
(void) do_swxc1
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fs, int rindex, int rbase, address_word instruction_0);

INLINE_SUPPORT\
(void) do_trunc_fmt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int type, int fmt, int fd, int fs);

INLINE_SUPPORT\
(void) do_addiu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, unsigned16 immediate);

INLINE_SUPPORT\
(void) do_addu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_and
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_daddiu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, unsigned16 immediate);

INLINE_SUPPORT\
(void) do_daddu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_ddiv
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt);

INLINE_SUPPORT\
(void) do_ddivu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt);

INLINE_SUPPORT\
(void) do_div
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt);

INLINE_SUPPORT\
(void) do_divu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt);

INLINE_SUPPORT\
(void) do_dmultx
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd, int signed_p);

INLINE_SUPPORT\
(void) do_dmult
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_dmultu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(unsigned64) do_dror
(SIM_DESC sd, instruction_address cia, int MY_INDEX, unsigned64 x,unsigned64 y);

INLINE_SUPPORT\
(void) do_dsll
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rd, int shift);

INLINE_SUPPORT\
(void) do_dsllv
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_dsra
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rd, int shift);

INLINE_SUPPORT\
(void) do_dsrav
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_dsrl
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rd, int shift);

INLINE_SUPPORT\
(void) do_dsrlv
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_dsubu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(unsigned_word) do_load
(SIM_DESC sd, instruction_address cia, int MY_INDEX, unsigned access, address_word base, address_word offset);

INLINE_SUPPORT\
(unsigned_word) do_load_left
(SIM_DESC sd, instruction_address cia, int MY_INDEX, unsigned access, address_word base, address_word offset, unsigned_word rt);

INLINE_SUPPORT\
(unsigned_word) do_load_right
(SIM_DESC sd, instruction_address cia, int MY_INDEX, unsigned access, address_word base, address_word offset, unsigned_word rt);

INLINE_SUPPORT\
(void) do_mfhi
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd);

INLINE_SUPPORT\
(void) do_mflo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd);

INLINE_SUPPORT\
(void) do_mult
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_multu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_nor
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_or
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_ori
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, unsigned immediate);

INLINE_SUPPORT\
(unsigned64) do_ror
(SIM_DESC sd, instruction_address cia, int MY_INDEX, unsigned32 x,unsigned32 y);

INLINE_SUPPORT\
(void) do_store
(SIM_DESC sd, instruction_address cia, int MY_INDEX, unsigned access, address_word base, address_word offset, unsigned_word word);

INLINE_SUPPORT\
(void) do_store_left
(SIM_DESC sd, instruction_address cia, int MY_INDEX, unsigned access, address_word base, address_word offset, unsigned_word rt);

INLINE_SUPPORT\
(void) do_store_right
(SIM_DESC sd, instruction_address cia, int MY_INDEX, unsigned access, address_word base, address_word offset, unsigned_word rt);

INLINE_SUPPORT\
(void) do_sll
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rd, int shift);

INLINE_SUPPORT\
(void) do_sllv
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_slt
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_slti
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, unsigned16 immediate);

INLINE_SUPPORT\
(void) do_sltiu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, unsigned16 immediate);

INLINE_SUPPORT\
(void) do_sltu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_sra
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rd, int shift);

INLINE_SUPPORT\
(void) do_srav
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_srl
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rd, int shift);

INLINE_SUPPORT\
(void) do_srlv
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_subu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_xor
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int rd);

INLINE_SUPPORT\
(void) do_xori
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, unsigned16 immediate);

INLINE_SUPPORT\
(const char *) str_FMT
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt);

INLINE_SUPPORT\
(const char *) str_TF
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int tf);

INLINE_SUPPORT\
(const char *) str_ND
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int nd);

INLINE_SUPPORT\
(const char *) str_COND
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int cond);

INLINE_SUPPORT\
(void) check_fmt_p
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int fmt, instruction_word insn);

INLINE_SUPPORT\
(void) check_fpu
(SIM_DESC sd, instruction_address cia, int MY_INDEX);

INLINE_SUPPORT\
(void) do_dsbh
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt);

INLINE_SUPPORT\
(void) do_dshd
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt);

INLINE_SUPPORT\
(void) do_dext
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int lsb, int size);

INLINE_SUPPORT\
(void) do_dextm
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int lsb, int size);

INLINE_SUPPORT\
(void) do_dextu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int lsb, int size);

INLINE_SUPPORT\
(void) do_di
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt);

INLINE_SUPPORT\
(void) do_dins
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int lsb, int msb);

INLINE_SUPPORT\
(void) do_dinsm
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int lsb, int msb);

INLINE_SUPPORT\
(void) do_ei
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt);

INLINE_SUPPORT\
(void) do_ext
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int lsb, int size);

INLINE_SUPPORT\
(void) do_mfhc1
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int fs);

INLINE_SUPPORT\
(void) do_mthc1
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int fs);

INLINE_SUPPORT\
(void) do_ins
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int lsb, int msb);

INLINE_SUPPORT\
(void) do_dinsu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int lsb, int msb);

INLINE_SUPPORT\
(void) do_seb
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt);

INLINE_SUPPORT\
(void) do_seh
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt);

INLINE_SUPPORT\
(void) do_rdhwr
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rd);

INLINE_SUPPORT\
(void) do_wsbh
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt);

INLINE_SUPPORT\
(address_word) delayslot16
(SIM_DESC sd, instruction_address cia, int MY_INDEX, address_word nia, address_word target);

INLINE_SUPPORT\
(address_word) basepc
(SIM_DESC sd, instruction_address cia, int MY_INDEX);

INLINE_SUPPORT\
(void) do_save
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int xsregs, int aregs, int ras0s1, int framesize);

INLINE_SUPPORT\
(const char *) str_MFHI
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int hi);

INLINE_SUPPORT\
(const char *) str_SAT
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int s);

INLINE_SUPPORT\
(const char *) str_UNS
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int u);

INLINE_SUPPORT\
(void) do_vr_mul_op
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int accumulate_p, int store_hi_p, int unsigned_p, int saturate_p, int subtract_p, int short_p, int double_p);

INLINE_SUPPORT\
(void) do_ph_op
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int op, int sat);

INLINE_SUPPORT\
(void) do_w_op
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int op);

INLINE_SUPPORT\
(void) do_qb_op
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int op, int sat);

INLINE_SUPPORT\
(void) do_qb_shift
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int shift, int op);

INLINE_SUPPORT\
(void) do_ph_shift
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int shift, int op, int sat);

INLINE_SUPPORT\
(void) do_w_shll
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int shift);

INLINE_SUPPORT\
(void) do_ph_s_absq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt);

INLINE_SUPPORT\
(void) do_w_s_absq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt);

INLINE_SUPPORT\
(void) do_qb_s_absq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt);

INLINE_SUPPORT\
(void) do_addsc
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_addwc
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_bitrev
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt);

INLINE_SUPPORT\
(void) do_extpv
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int ac, int rs, int op);

INLINE_SUPPORT\
(void) do_extrv
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int ac, int rs, int op);

INLINE_SUPPORT\
(void) do_extrv_s_h
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int ac, int rs);

INLINE_SUPPORT\
(void) do_insv
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs);

INLINE_SUPPORT\
(void) do_lxx
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int base, int index, int op);

INLINE_SUPPORT\
(void) do_modsub
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_mthlip
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int ac);

INLINE_SUPPORT\
(void) do_mulsaq_s_w_ph
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt);

INLINE_SUPPORT\
(void) do_ph_packrl
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_qb_pick
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_ph_pick
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_qb_ph_precequ
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int op);

INLINE_SUPPORT\
(void) do_qb_ph_preceu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int op);

INLINE_SUPPORT\
(void) do_w_preceq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int op);

INLINE_SUPPORT\
(void) do_w_ph_precrq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_ph_qb_precrq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int sat);

INLINE_SUPPORT\
(void) do_w_ph_rs_precrq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_qb_w_raddu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs);

INLINE_SUPPORT\
(void) do_rddsp
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int mask);

INLINE_SUPPORT\
(void) do_repl
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int p2, int op);

INLINE_SUPPORT\
(void) do_shilov
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs);

INLINE_SUPPORT\
(void) do_ph_shl
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int rs, int op, int sat);

INLINE_SUPPORT\
(void) do_qb_shl
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int rs, int op);

INLINE_SUPPORT\
(void) do_w_s_shllv
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int rs);

INLINE_SUPPORT\
(void) do_ph_shrlv
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int rs);

INLINE_SUPPORT\
(void) do_w_r_shrav
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int rs);

INLINE_SUPPORT\
(void) do_wrdsp
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int mask);

INLINE_SUPPORT\
(void) do_qb_shrav
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int rs, int round);

INLINE_SUPPORT\
(void) do_append
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int sa);

INLINE_SUPPORT\
(void) do_balign
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int bp);

INLINE_SUPPORT\
(void) do_ph_w_mulsa
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt);

INLINE_SUPPORT\
(void) do_ph_qb_precr
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt);

INLINE_SUPPORT\
(void) do_prepend
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int sa);

INLINE_SUPPORT\
(void) do_w_shra
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int shift);

INLINE_SUPPORT\
(void) do_qb_muleu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int loc);

INLINE_SUPPORT\
(void) do_ph_mulq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int round);

INLINE_SUPPORT\
(void) do_ph_muleq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int loc);

INLINE_SUPPORT\
(void) do_qb_dot_product
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt, int op, int loc);

INLINE_SUPPORT\
(void) do_ph_dot_product
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt, int op);

INLINE_SUPPORT\
(void) do_w_dot_product
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt, int op);

INLINE_SUPPORT\
(void) do_ph_maq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt, int op, int loc);

INLINE_SUPPORT\
(void) do_qb_cmpu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int op);

INLINE_SUPPORT\
(void) do_qb_cmpgu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int op);

INLINE_SUPPORT\
(void) do_ph_cmpu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rs, int rt, int op);

INLINE_SUPPORT\
(void) do_w_extr
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int ac, int shift, int op);

INLINE_SUPPORT\
(void) do_h_extr
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int ac, int shift);

INLINE_SUPPORT\
(void) do_extp
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int ac, int size, int op);

INLINE_SUPPORT\
(void) do_shilo
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int shift);

INLINE_SUPPORT\
(void) do_u_ph_op
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int op, int sat);

INLINE_SUPPORT\
(void) do_uh_qb_op
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int op, int round);

INLINE_SUPPORT\
(void) do_qb_cmpgdu
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int op);

INLINE_SUPPORT\
(void) do_w_ph_dot_product
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt, int op);

INLINE_SUPPORT\
(void) do_w_mulq
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int round);

INLINE_SUPPORT\
(void) do_precr_sra
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rt, int rs, int sa, int round);

INLINE_SUPPORT\
(void) do_qb_shra
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int shift, int round);

INLINE_SUPPORT\
(void) do_ph_shrl
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rt, int shift);

INLINE_SUPPORT\
(void) do_qh_ph_op
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int op, int round);

INLINE_SUPPORT\
(void) do_qh_w_op
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int rd, int rs, int rt, int op, int round);

INLINE_SUPPORT\
(void) do_x_w_ph_dot_product
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt, int op);

INLINE_SUPPORT\
(void) do_qx_w_ph_dot_product
(SIM_DESC sd, instruction_address cia, int MY_INDEX, int ac, int rs, int rt, int op, int sat);


#if defined(SUPPORT_INLINE)
# if ((SUPPORT_INLINE & INCLUDE_MODULE)\
      && (SUPPORT_INLINE & INCLUDED_BY_MODULE))
#  include "support.c"
# endif
#endif

#endif /* _SUPPORT_H_*/
